library(car)
library(tseries)
library(astsa)
library(forecast)
library(lubridate)
library(fpp2)
#Path Rita
Data <- read.csv(file = 'C:/Users/Rita/Desktop/Mestrado em Ci?ncia de Dados - UA/1? Ano/2? Semestre/S?ries Temporais/Trabalho Grupo/Time-Series-Project/gold.csv')
#Path Nuno
#Data <- read.csv(file = 'C:/Users/nunop/Desktop/C. Dados/Semestre 2/ST/Trabalho/git/GIT/Time-Series-Project/gold.csv')
Data
#Path Rita
Data <- read.csv(file = 'C:/Users/Rita/Desktop/Mestrado em Ciência de Dados - UA/1º Ano/2º Semestre/Séries Temporais/Trabalho Grupo/Time-Series-Project/gold.csv')
#Path Nuno
#Data <- read.csv(file = 'C:/Users/nunop/Desktop/C. Dados/Semestre 2/ST/Trabalho/git/GIT/Time-Series-Project/gold.csv')
Data
# number of rows
nrow(Data)
# check first and last values
head(Data,1)
tail(Data,1)
# check days by year ( Because the stock market isn't open everyday we don't have 365 values per year)
With_date = subset(Data, select = -c(Open,High,Low,Volume,Currency) )
With_date
Dates = With_date$Date
Dates
years_list <- c("2000", "2001", "2002", "2003", "2004", "2005", "2006", "2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019", "2020", "2021", "2022")
years_list
length(years_list)
years_count <- c(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
years_count
years_list
for(i in Dates) {
year = strsplit(i, split = "-")[[1]][1]
id = which(year == years_list)
years_count[id] = years_count[id] + 1
}
years_count
years_count = head(years_count, -1)
years_count
mean(years_count)
#Final data
Data
rownames(Data) <- Data[,1]
Data = subset(Data, select = -c(Date,Open,High,Low,Volume,Currency) )
Data
# Data in a List
DataList = Data$Close
DataList
#Descriptive statistics
summary(DataList)
#Standard deviation and variance
sd(DataList)
var(DataList)
qqnorm(DataList, main="Normal QQPlot for Gold Prices in USD")
qqline(DataList, col = "steelblue", lwd = 3, lty = 2)
# NÃ£o funciona nÃ£o sei porque
#Histogram
hist(DataList], main="Histogram for Gold Prices in USD",
xlab = "Gold Prices", col="grey",
xlim=c(0,160))
# NÃ£o funciona nÃ£o sei porque
#Histogram
hist(DataList, main="Histogram for Gold Prices in USD",
xlab = "Gold Prices", col="grey",
xlim=c(0,160))
# NÃ£o funciona nÃ£o sei porque
#Histogram
hist(DataList, main="Histogram for Gold Prices in USD",
xlab = "Gold Prices", col="grey",
xlim=c(0,2500))
mts <- ts(DataList, start = decimal_date(ymd("2000-01-04")),
frequency = 255.333)
#Plot the data
plot.ts(mts, main="Gold Prices in USD", ylab = "Gold Prices", xlab = "Date")
#Plot the data
plot.ts(DataList, main="Gold Prices in USD", ylab = "Gold Prices", xlab = "Date")
#Plot the data
plot.ts(mts, main="Gold Prices in USD", ylab = "Gold Prices", xlab = "Date")
# First difference of the data
# Other way of considering the stabilization in mean: get the series with one difference
# Tirou a trend, ou seja deve ser em AR 1
fData=diff(DataList)
lData=log(DataList)
lfData=diff(log(DataList))
mtsf <- ts(fData, start = decimal_date(ymd("2000-01-04")),
frequency = 255.333)
mtsl <- ts(lData, start = decimal_date(ymd("2000-01-04")),
frequency = 255.333)
mtslf <- ts(lfData, start = decimal_date(ymd("2000-01-04")),
frequency = 255.333)
mean(DataList)
var(DataList)
mean(fData)
var(fData)
mean(lData)
var(lData)
mean(lfData)
var(lfData)
par(mfrow=c(2,2))
plot.ts(mts, main="Normal", ylab = "Gold Prices", xlab = "Date")
plot.ts(mtsf, main="First Differences", ylab = "Gold Prices", xlab = "Date")
plot.ts(mtsl, main="Log", ylab = "Gold Prices", xlab = "Date")
plot.ts(mtslf, main="Log and First Differences", ylab = "Gold Prices", xlab = "Date")
View(Data)
View(With_date)
View(Data)
adf.test(mtsl)
adf.test(mtslf)
kpss.test(mtsl, null = c("Level", "Trend"), lshort = TRUE)
kpss.test(mtslf, null = c("Level", "Trend"), lshort = TRUE)
#Model Additive
DataComposeAdd <- decompose(mtsl, "additive")
DataComposeAdd
plot(as.ts(DataComposeAdd$seasonal))
plot(as.ts(DataComposeAdd$trend))
plot(as.ts(DataComposeAdd$random))
plot(DataComposeAdd)
plot(DataComposeAdd, main="Decomposition of additive Log and First Differences" )
#Model Additive
DataComposeAdd <- decompose(mtsl, "additive")
DataComposeAdd
plot(as.ts(DataComposeAdd$seasonal))
plot(as.ts(DataComposeAdd$trend))
plot(as.ts(DataComposeAdd$random))
plot(DataComposeAdd, main="Decomposition of additive Log and First Differences" )
plot(DataComposeAdd )
#Model Additive
DataComposeAdd <- decompose(mtsl, "additive")
DataComposeAdd
plot(as.ts(DataComposeAdd$seasonal))
plot(as.ts(DataComposeAdd$trend))
plot(as.ts(DataComposeAdd$random))
plot(DataComposeAdd, main="Decomposition of additive Log and First Differences")
#Model Additive
DataComposeAdd <- decompose(mtsl, "additive")
DataComposeAdd
plot(as.ts(DataComposeAdd$seasonal))
plot(as.ts(DataComposeAdd$trend))
plot(as.ts(DataComposeAdd$random))
plot(DataComposeAdd)
#Model Multiplicative
DataComposeMulti <- decompose(mtsl, "multiplicative")
DataComposeMulti
plot(as.ts(DataComposeMulti$seasonal))
plot(as.ts(DataComposeMulti$trend))
plot(as.ts(DataComposeMulti$random))
plot(DataComposeMulti)
#Model Additive
#tsf_Data_Add = ts(fData, frequency = 258)
DataComposeAddf <- decompose(mtslf, "additive")
DataComposeAddf
plot(as.ts(DataComposeAddf$seasonal))
plot(as.ts(DataComposeAddf$trend))
plot(as.ts(DataComposeAddf$random))
plot(DataComposeAddf)
#Model Multiplicative
#tsf_Data_Multi = ts(fData, frequency = 258)
DataComposeMultif <- decompose(mtslf, "multiplicative")
DataComposeMultif
plot(as.ts(DataComposeMultif$seasonal))
plot(as.ts(DataComposeMultif$trend))
plot(as.ts(DataComposeMultif$random))
plot(DataComposeMultif)
library(car)
library(tseries)
library(astsa)
library(forecast)
library(lubridate)
library(fpp2)
